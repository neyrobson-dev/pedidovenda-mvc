unit projetopedidovenda.view.pedidovenda;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Data.DB,
  Vcl.StdCtrls,
  Vcl.ComCtrls,
  Vcl.ExtCtrls,
  Vcl.Buttons,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Param,
  FireDAC.Stan.Error,
  FireDAC.DatS,
  FireDAC.Phys.Intf,
  FireDAC.DApt.Intf,
  Vcl.Grids,
  Vcl.DBGrids,
  FireDAC.Comp.DataSet,
  FireDAC.Comp.Client,
  projetopedidovenda.controller.interfaces,
  projetopedidovenda.controller, Vcl.Mask;

type
  TfrmPedidoVenda = class(TForm)
    edtIdCliente: TEdit;
    edtNomeCliente: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    edtIdProduto: TEdit;
    edtQuantidade: TEdit;
    Label4: TLabel;
    Label5: TLabel;
    edtValorUnitario: TEdit;
    Label6: TLabel;
    Panel27: TPanel;
    Shape5: TShape;
    Label8: TLabel;
    lblValorTotal: TLabel;
    Label7: TLabel;
    edtNumeroPedido: TEdit;
    btnBuscaPedido: TSpeedButton;
    Panel16: TPanel;
    pnlTitleDescricao: TPanel;
    Label9: TLabel;
    pnlTitleCodigo: TPanel;
    Label10: TLabel;
    pnlTitleQuantidade: TPanel;
    Label11: TLabel;
    pnlTitleValorUnitario: TPanel;
    Label12: TLabel;
    pnlTitleValorTotal: TPanel;
    Label13: TLabel;
    fdmItens: TFDMemTable;
    dtsItens: TDataSource;
    dbgrdItens: TDBGrid;
    fdmItensidProduto: TIntegerField;
    fdmItensdescricaoProduto: TStringField;
    fdmItensquantidade: TIntegerField;
    fdmItensvalorUnitario: TCurrencyField;
    fdmItensvalorTotal: TCurrencyField;
    fdmItenstotalGeral: TAggregateField;
    fdmItensitem: TIntegerField;
    btnConfirmar: TBitBtn;
    btnFinalizarPedido: TBitBtn;
    btnCancelarPedido: TBitBtn;
    procedure FormCreate(Sender: TObject);
    procedure edtIdClienteChange(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure edtIdProdutoChange(Sender: TObject);
    procedure btnBuscaPedidoClick(Sender: TObject);
    procedure dbgrdItensKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure edtValorUnitarioKeyPress(Sender: TObject; var Key: Char);
    procedure edtValorUnitarioExit(Sender: TObject);
    procedure edtIdClienteExit(Sender: TObject);
    procedure btnConfirmarClick(Sender: TObject);
    procedure btnFinalizarPedidoClick(Sender: TObject);
    procedure btnCancelarPedidoClick(Sender: TObject);
    procedure edtNumeroPedidoKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  private
    { Private declarations }
    FController: iController;
    FDataSource: TDataSource;
    FValorTotal: Double;
    FIdPedido: Integer;
    FItem: Integer;

    procedure PreencheList;
    procedure EditarItem(aItem: Integer);
    procedure LimparCamposProduto;
    procedure LimparCamposCliente;
    procedure TestarClienteInformado;
    procedure TestarProdutoInformado;
    procedure TotalizarPedido;
    procedure HabilitaCampos(aValue: Boolean = True);
  public
    { Public declarations }
  end;

var
  frmPedidoVenda: TfrmPedidoVenda;

implementation

{$R *.dfm}

procedure TfrmPedidoVenda.edtIdClienteChange(Sender: TObject);
var
  iId: Integer;
begin
  if not fdmItens.Active then
    fdmItens.Open;

  TryStrToInt(edtIdCliente.Text, iId);
  if not (iId = 0) then
  begin
    edtNomeCliente.Text := FController.Cliente.Build.ListarPorId(iId).This.Nome;
    HabilitaCampos();
  end;
end;

procedure TfrmPedidoVenda.edtIdClienteExit(Sender: TObject);
begin
  if edtIdCliente.Text = EmptyStr then
    edtNomeCliente.Clear;
end;

procedure TfrmPedidoVenda.edtIdProdutoChange(Sender: TObject);
var
  iId: Integer;
begin
  if FItem > 0 then
    Exit;

  TryStrToInt(edtIdProduto.Text, iId);
  if iId <> 0 then
  begin
    FController.Produto.Build.ListarPorId(iId).DataSource(FDataSource);
    if not FDataSource.DataSet.IsEmpty then
    begin
      edtValorUnitario.Text := FormatFloat('#,##0.00', FDataSource.DataSet.FieldByName('precovenda').AsFloat);
      Exit;
    end;
    Application.MessageBox('Não foi possível encontrar nenhum produto com o código informado!','Atenção', MB_OK+MB_ICONWARNING);
    LimparCamposProduto;
  end;
end;

procedure TfrmPedidoVenda.edtNumeroPedidoKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_RETURN then
    btnBuscaPedidoClick(nil);
end;

procedure TfrmPedidoVenda.edtValorUnitarioExit(Sender: TObject);
begin
  if edtValorUnitario.Text = EmptyStr then
    edtValorUnitario.Text := '0';

  edtValorUnitario.Text := FormatFloat('#,##0.00', StrtoFloat(StringReplace(edtValorUnitario.Text, '.','',[rfReplaceAll])));
end;

procedure TfrmPedidoVenda.edtValorUnitarioKeyPress(Sender: TObject;
  var Key: Char);
begin
  if ((key in ['a'..'z']) or (key in ['A'..'Z'])) then
    key := '0';
end;

procedure TfrmPedidoVenda.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  if FDataSource.ComponentState <> [csDestroying] then
    FDataSource.DisposeOf;
end;

procedure TfrmPedidoVenda.FormCreate(Sender: TObject);
begin
  FDataSource := TDataSource.Create(nil);
  FController := TController.New;
end;

procedure TfrmPedidoVenda.HabilitaCampos(aValue: Boolean = True);
begin
  edtIdCliente.Enabled := aValue;
  edtIdProduto.Enabled := aValue;
  edtNumeroPedido.Enabled := aValue and (not (edtIdCliente.Text <> EmptyStr));
end;

procedure TfrmPedidoVenda.PreencheList;
begin
  try
    fdmItens.Append;
    fdmItens.FieldByName('item').AsInteger := fdmItens.RecordCount + 1;
    fdmItens.FieldByName('idProduto').AsString := edtIdProduto.Text;
    fdmItens.FieldByName('descricaoProduto').AsString := FDataSource.DataSet.FieldByName('descricao').AsString;
    fdmItens.FieldByName('quantidade').AsString := edtQuantidade.Text;
    fdmItens.FieldByName('valorUnitario').AsString := StringReplace(edtValorUnitario.Text, '.','',[rfReplaceAll]);
    fdmItens.FieldByName('valorTotal').AsString := StringReplace(FormatFloat('#,##0.00',(fdmItens.FieldByName('valorUnitario').AsCurrency *
      (StrToInt(edtQuantidade.Text)))),'.','',[rfReplaceAll]);;
    fdmItens.Post;
  finally
    fdmItens.Cancel;
  end;

  TotalizarPedido;

  LimparCamposProduto;
end;

procedure TfrmPedidoVenda.TestarClienteInformado;
begin
  if (edtIdCliente.Text = EmptyStr) or (edtNomeCliente.Text = EmptyStr) then
  begin
    Application.MessageBox('Informe o cliente', 'Atenção', MB_OK+MB_ICONWARNING);
    edtIdCliente.SetFocus;
    Abort;
  end;
end;

procedure TfrmPedidoVenda.TestarProdutoInformado;
begin
  if (edtIdProduto.Text = EmptyStr) then
  begin
    Application.MessageBox('Informe o produto', 'Atenção', MB_OK + MB_ICONWARNING);
    edtIdProduto.SetFocus;
    Abort;
  end;
end;

procedure TfrmPedidoVenda.LimparCamposCliente;
begin
  edtIdCliente.Clear;
  edtNomeCliente.Clear;
end;

procedure TfrmPedidoVenda.TotalizarPedido;
begin
  if (fdmItens.RecordCount <= 0) or (fdmItens.FieldByName('totalGeral').Value = 0) then
  begin
    lblValorTotal.Caption := 'R$ 0,00';
    FValorTotal := 0;
    Exit;
  end;

  lblValorTotal.Caption := 'R$ ' + FormatFloat('#,##0.00', fdmItens.FieldByName('totalGeral').Value);
  FValorTotal := fdmItens.FieldByName('totalGeral').Value;
end;

procedure TfrmPedidoVenda.btnConfirmarClick(Sender: TObject);
begin
  TestarClienteInformado;
  TestarProdutoInformado;

  if FItem > 0 then
    EditarItem(FItem)
  else
    PreencheList;
end;

procedure TfrmPedidoVenda.btnFinalizarPedidoClick(Sender: TObject);
var
  iIdPedido: Integer;
begin
  TestarClienteInformado;

  try
    if FIdPedido <= 0 then
    begin
      iIdPedido := FController.Pedido
        .IdCliente(StrToInt(edtIdCliente.Text))
        .ValorTotal(FValorTotal)
        .DataEmissao(Now)
        .Build
        .Inserir
        .LastID.This.Id;
    end
    else
    begin
      FController.Pedido
        .IdCliente(StrToInt(edtIdCliente.Text))
        .ValorTotal(FValorTotal)
        .DataEmissao(Now)
        .Build
        .Atualizar;
      FController.PedidoItens.Build.Excluir('idPedido', IntToStr(FIdPedido));
      iIdPedido := FIdPedido;
    end;

    fdmItens.First;
    while not fdmItens.Eof do
    begin
      FController.PedidoItens
        .IdPedido(iIdPedido)
        .IdProduto(fdmItens.FieldByName('idProduto').AsInteger)
        .Quantidade(fdmItens.FieldByName('quantidade').AsInteger)
        .ValorUnitario(fdmItens.FieldByName('valorUnitario').AsFloat)
        .ValorTotal(fdmItens.FieldByName('valorTotal').AsFloat)
        .Build.Inserir;

      fdmItens.Next;
    end;

    Application.MessageBox(pChar(Format('Pedido Nº %d realizado com sucesso!', [iIdPedido])),'Sucesso',MB_OK+MB_ICONINFORMATION);
    LimparCamposCliente;
    edtNumeroPedido.Clear;

    fdmItens.Close;
    TotalizarPedido;
    HabilitaCampos();
  except
    raise Exception.Create('Não foi possivel realizar o pedido');
  end;
end;

procedure TfrmPedidoVenda.btnCancelarPedidoClick(Sender: TObject);
begin
  if (FIdPedido > 0) and (Application.MessageBox('Confirma a exclusão do pedido?','Confirmação', MB_YESNO+MB_ICONQUESTION) = mrYes) then
  begin
    FController.PedidoItens.Build.Excluir('idPedido', IntToStr(FIdPedido));
    FController.Pedido.Build.Excluir('id', IntToStr(FIdPedido));

    Application.MessageBox('Pedido excluído com sucesso!','Sucesso',MB_OK+MB_ICONINFORMATION);
  end;

  LimparCamposCliente;
  LimparCamposProduto;

  edtNumeroPedido.Clear;

  fdmItens.Close;
  HabilitaCampos();
end;

procedure TfrmPedidoVenda.btnBuscaPedidoClick(Sender: TObject);
var
  iId: Integer;
  dataItens: TDataSource;
begin
  if edtNumeroPedido.Text = EmptyStr then
  begin
    Application.MessageBox('Informe o número do pedido!', 'Atenção', MB_OK+MB_ICONEXCLAMATION);
    edtNumeroPedido.SetFocus;
    Abort;
  end;

  TryStrToInt(edtNumeroPedido.Text, iId);
  if iId <> 0 then
  begin
    FController.Pedido.Build.ListarPorId(iId).DataSource(FDataSource);
    if not FDataSource.DataSet.IsEmpty then
    begin
      edtIdCliente.Text := FDataSource.DataSet.FieldByName('idCliente').AsString;
      FIdPedido := FDataSource.DataSet.FieldByName('id').AsInteger;
      dataItens := TDataSource.Create(nil);
      try
        FController.PedidoItens.Build.ListarPor('idPedido', iId).DataSource(dataItens);
        while not dataItens.DataSet.Eof do
        begin
          fdmItens.Append;
          fdmItens.FieldByName('item').AsInteger := fdmItens.RecordCount + 1;
          fdmItens.FieldByName('idProduto').AsString := dataItens.DataSet.FieldByName('idProduto').AsString;
          fdmItens.FieldByName('descricaoProduto').AsString := FController.Produto.Build.ListarPorId(dataItens.DataSet.FieldByName('idProduto').AsInteger).This.Descricao;
          fdmItens.FieldByName('quantidade').AsString := dataItens.DataSet.FieldByName('quantidade').AsString;
          fdmItens.FieldByName('valorUnitario').AsString := StringReplace(FormatFloat('#,##0.00', dataItens.DataSet.FieldByName('valorUnitario').AsFloat), '.','',[rfReplaceAll]);
          fdmItens.FieldByName('valorTotal').AsString := StringReplace(FormatFloat('#,##0.00', dataItens.DataSet.FieldByName('valorTotal').AsFloat), '.','',[rfReplaceAll]);
          fdmItens.Post;
          dataItens.DataSet.Next;
        end;

        TotalizarPedido;
        HabilitaCampos(False);

      finally
        dataItens.DisposeOf;
      end;

      Exit;
    end;
    Application.MessageBox('Não foi possível encontrar pedido pelo número informado!','Atenção', MB_OK+MB_ICONWARNING);
    edtNumeroPedido.Text := '';
  end;
end;

procedure TfrmPedidoVenda.dbgrdItensKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  case Key of
    VK_RETURN:
    begin
      FItem := fdmItens.FieldByName('item').AsInteger;
      edtIdProduto.Text := fdmItens.FieldByName('idProduto').AsString;
      edtQuantidade.Text := fdmItens.FieldByName('quantidade').AsString;
      edtValorUnitario.Text := fdmItens.FieldByName('valorUnitario').AsString;

      edtQuantidade.SetFocus;

      HabilitaCampos(False);
    end;
    VK_DELETE:
    begin
      if Application.MessageBox('Deseja remover o produto?','Confirmação',MB_YESNO + MB_ICONQUESTION) = mrYes then
        dbgrdItens.DataSource.DataSet.Delete;

      TotalizarPedido;
    end;
  end;
end;

procedure TfrmPedidoVenda.EditarItem(aItem: Integer);
begin
  fdmItens.Locate('item', aItem);
  fdmItens.Edit;
  fdmItens.FieldByName('idProduto').AsString := edtIdProduto.Text;
  fdmItens.FieldByName('quantidade').AsString := edtQuantidade.Text;
  fdmItens.FieldByName('valorUnitario').AsString := StringReplace(edtValorUnitario.Text, '.','',[rfReplaceAll]);
  fdmItens.FieldByName('valorTotal').AsString := StringReplace(FormatFloat('#,##0.00',(fdmItens.FieldByName('valorUnitario').AsCurrency *
    (StrToInt(edtQuantidade.Text)))), '.','',[rfReplaceAll]);
  fdmItens.Post;

  TotalizarPedido;

  FItem := 0;

  LimparCamposProduto;
  HabilitaCampos();
end;

procedure TfrmPedidoVenda.LimparCamposProduto;
begin
  edtIdProduto.Clear;
  edtValorUnitario.Clear;
  edtQuantidade.Text := '1';
end;

end.
